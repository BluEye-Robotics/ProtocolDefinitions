/**
 * Common messages
 *
 * These are used for logging as well as building requests and responses.
 */
syntax = "proto3";

package blueye.protocol;
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
option csharp_namespace = "Blueye.Protocol.Protobuf";

/**
  * Wrapper message for each entry in the drone telemetry logfile.
  *
  * Each entry contains the unix timestamp in UTC, the monotonic timestamp (time since boot),
  * and an Any message wrapping the custom Blueye message.
  *
  * See separate documentation for the logfile format for more details.
  */
message BinlogRecord {
  google.protobuf.Any payload = 1; // The log entry payload.
  google.protobuf.Timestamp unix_timestamp = 2; // Unix timestamp in UTC.
  google.protobuf.Timestamp clock_monotonic = 3; // Posix CLOCK_MONOTONIC timestamp.
}

/**
 * Motion input from client.
 *
 * Used to indicate the desired motion in each direction.
 * Typically these values map to the left and right joystick for motion,
 * and the left and right trigger for the slow and boost modifiers.
 */
message MotionInput {
  float surge = 1; // Forward (positive) and backwards (negative) movement. (-1..1)
  float sway = 2; // Right (positive) and left (negative) lateral movement (-1..1)
  float heave = 3; // Descend (positive) and ascend (negative) movement (-1..1)
  float yaw = 4; // Left (positive) and right (negative) movement (-1..1)
  float slow = 5; // Multiplier used to reduce the speed of the motion (0..1)
  float boost = 6; // Multiplier used to increase the speed of the motion (0..1)
}

message UserModifiers {
  float surge_modifier = 1;
  float sway_modifier = 2;
  float heave_modifier = 3;
  float yaw_modifier = 4;
  float jerk_modifier = 5;
}

/**
  * Lights message used to represent the intensity of the main light or external lights.
  */
message Lights {
  float value = 1; // Light intensity (0..1)
}

/**
  * Latitude and longitude position in WGS 84 format.
  */
message LatLongPosition {
  float latitude = 1; // Latitude
  float longitude = 2; // Longitude
}

/**
  * Connection duration of a remote client.
  */
message ConnectionDuration {
  int64 value = 1;
}

/**
  * Auto heading state.
  */
message AutoHeadingState {
  bool enabled = 1; // If auto heading is enabled
}

/**
  * Auto depth state.
  */
message AutoDepthState {
  bool enabled = 1; // If auto depth is enabled
}

/**
  * Tilt stabilization state.
  *
  * Blueye drones with mechanical tilt has the ability to enable
  * camera stabilization.
  */
message TiltStabilizationState {
  bool enabled = 1;
}

/**
  * System time.
  */
message SystemTime {
  google.protobuf.Timestamp unix_timestamp = 1; // Unix timestamp
}

/**
  * Information about a remote client.
  */
message ClientInfo {
  string type = 1; // The type of client (such as Blueye App, Observer App, SDK, etc)
  string version = 2; // Client software version string
  string device_type = 3; // Device type, such as mobile, tablet, or computer
  string platform = 4; // Platform, such as iOS, Android, Linux, etc
  string platform_version = 5; // Platform software version string
}

/**
  * Camera recording state.
  */
message RecordState {
  bool is_recording = 1; // If the camera is recording
  int32 seconds = 2; // Record time in seconds
}

/**
  * Water density.
  *
  * Used to specify the water density the drone is operating in,
  * to achieve more accruate depth measurements.
  */
message WaterDensity {
  int32 value = 1; // Salinity in grams per liter
}

/**
 * Water temperature measured by the drone's combined depth and temperature sensor.
 */
message WaterTemperature {
  float value = 1; // Water temperature in °C
}

/**
 * CPU temperature.
 */
message CPUTemperature {
  float value = 1; // CPU temperature in °C
}

/**
  * Canister temperature
  *
  * Temperature measured in the top and bottom canister of the drone.
  */
message CanisterTemperature {
  float top = 1; // Temperature in °C
  float bottom = 2; // Temperature in °C
}

/**
  * Canister humidity
  */
message CanisterHumidity {
  int32 top = 1;
  int32 bottom = 2;
}

enum BatteryState {
  BATTERY_STATE_UNSPECIFIED = 0;
  BATTERY_STATE_INITIALIZATION = 1;
  BATTERY_STATE_CHARGING = 2;
  BATTERY_STATE_DISCHARGING_OR_RELAX = 3;
  BATTERY_STATE_FULLY_CHARGED = 4;
  BATTERY_STATE_FULLY_DISCHARGED = 5;
}

// Wrapper message around enum in order to avoid name clashes
enum BatteryError {
  BATTERY_ERROR_UNSPECIFIED = 0;
  BATTERY_ERROR_OK = 1;
  BATTERY_ERROR_BUSY = 2;
  BATTERY_ERROR_RESERVED_COMMAND = 3;
  BATTERY_ERROR_UNSUPPORTED_COMMAND = 4;
  BATTERY_ERROR_ACCESS_DENIED = 5;
  BATTERY_ERROR_OVERFLOW_UNDERFLOW = 6;
  BATTERY_ERROR_BAD_SIZE = 7;
  BATTERY_ERROR_UNKNOWN_ERROR = 8;
}

/**
  * Battery information message.
  *
  * Detailed information about all aspects of the connected Blueye smart battery.
  */
message Battery{
  /**
    * Battery voltage levels
    */
  message Voltage {
    int32 total = 1; // Battery pack voltage level
    int32 cell_1 = 2; // Cell 1 voltage level
    int32 cell_2 = 3; // Vell 2 voltage level
    int32 cell_3 = 4; // Cell 3 voltage level
    int32 cell_4 = 5; // Cell 4 voltage level
  }
  Voltage voltage = 1;

  /**
   * Battery temperature
   */
  message Temperature {
    float average = 1; // Average temperature accross cells in °C
    float cell_1 = 2; // Cell 1 temperature in °C
    float cell_2 = 3; // Cell 2 temperature in °C
    float cell_3 = 4; // Cell 3 temperature in °C
    float cell_4 = 5; // Cell 4 temperature in °C
  }
  Temperature temperature = 2;
  BatteryState state = 3;

  /**
    * Active battery alarms.
    */
  message Alarms {
    bool overcharged = 1;
    bool terminate_charge = 2;
    bool over_temperature = 3;
    bool terminate_discharge = 4;
    bool remaining_capacity = 5;
    bool remaining_time = 6;
  }
  Alarms alarms = 4;
  BatteryError error = 5;

  int32 current = 6;
  int32 average_current = 7;
  int32 relative_state_of_charge = 8;
  int32 absolute_state_of_charge = 9;
  int32 remaining_capacity = 10;
  int32 full_charge_capacity = 11;
  int32 runtime_to_empty = 12;
  int32 average_time_to_empty = 13;
  int32 average_time_to_full = 14;
  int32 time_to_full_at_current_rate = 15;
  int32 time_to_empty_at_current_rate = 16;
  int32 charging_current = 17;
  int32 charging_voltage = 18;

  uint32 cycle_count = 19;
  uint32 design_capacity = 20;
  google.protobuf.Timestamp manufacture_date = 21;
  uint32 serial_number = 22;
  string manufacturer_name = 23;
  string device_name = 24;
  string device_chemistry = 25;
}

/**
 * The attitude of the drone.
 */
message Attitude {
  float roll = 1; // Roll angle (-180..180)
  float pitch = 2; // Pitch angle (-180..180)
  float yaw = 3; // Yaw angle (-180..180)
}

/**
 * Drone altitude over seabed, typically obtained from a DVL.
 */
message Altitude {
  int32 value = 1; // Drone altitude over seabed in mm
  bool valid = 2; // Altitude valid or not
}

/**
 * Water depth of the drone.
 */
message Depth {
  int32 value = 1; // Drone depth below surface in mm
}

message Reference {
  float surge = 1;
  float sway = 2;
  float heave = 3;
  float yaw = 4;
  float depth = 5; // Reference drone depth below surface in mm

// Can be added as needed:
  //float depth_rate = 6;
  //float depth_acc = 7;
  //float heading = 8;
  //float heading_rate = 9;
  //float heading_acc = 10;
}

/**
  * Amount of time the drone has been submerged.
  *
  * The drone starts incrementing this value when the depth is above 250 mm.
  */
message DiveTime {
  int32 value = 1; // Number of seconds the drone has been submerged
}

/**
  * Storage space.
  */
message StorageSpace {
  int64 total_space = 1; // Total bytes of storage space
  int64 free_space = 2; // Available bytes of storage space
}

/**
  * Compass calibration state.
  */
message CalibrationState {
  int32 active_status = 1;
  int32 progress_x_up = 2;
  int32 progress_x_down = 3;
  int32 progress_y_up = 4;
  int32 progress_y_down = 5;
  int32 progress_z_up = 6;
  int32 progress_z_down = 7;
  int32 progress_thruster = 8;
}

/**
  * Connection speed between drone and Surface Unit.
  */
message IperfStatus {
  int32 sent = 1; // Transfer rate from drone to Surface Unit in Mbit/s
  int32 received = 2; // Transfer rate from Surface Unit to drone in Mbit/s
}

/**
 * Number of spectators connected to video stream.
 */
message Spectators {
  int32 value = 1; // The number of connected spectators
}

/**
 * Angle of tilt camera in degrees.
 */
message TiltAngle {
  int32 value = 1; // Tilt angle in degrees °
}

/**
  * Information about the drone.
  *
  * This message contains serial numbers and version informattion for
  * internal components in the drone. Primarily used for diagnostics, or to
  * determine the origin of a logfile.
  */
message DroneInfo {
  string blunux_version = 1; // Blunux version string
  string serial_number = 2; // Drone serial number
  string hardware_id = 3; // Main computer unique identifier
  string model_name = 4; // Drone model name (Pioneer, Pro, or X3)
  string mb_serial = 5; // Motherboard serial number
  string bb_serial = 6; // Backbone serial number
  string mb_uid = 7; // Motherboard unique identifier
  string bb_uid = 8; // Backbone unique identifier
  string gp1_uid = 9; // Guestport 1 unique identifier
  string gp2_uid = 10; // Guestport 2 unique identifier
  string gp3_uid = 11; // Guesport 3 unique identifier
}

/**
  * Known error states for the drone.
  */
message ErrorFlags {
  // Acknowledge message not received for a message published to internal micro controller
  bool pmu_comm_ack = 1;
  bool pmu_comm_stream = 2; // Error in communication with internal micro controller
  bool depth_read = 3; // Error reading depth sensor value
  bool depth_spike = 4; // Sudden spike in value read from depth sensor
  bool inner_pressure_read = 5; // Error reading inner pressure of the drone
  bool inner_pressure_spike = 6; // Sudden spike in inner preassure
  bool compass_calibration = 7; // Compass needs calibration
  bool tilt_calibration = 8; // Error during calibration of tilt endpoints
}

/**
  * Available camera resolutions.
  */
enum Resolution {
  RESOLUTION_UNSPECIFIED = 0; // Resolution not specified
  RESOLUTION_FULLHD_1080P = 1; // 1080p Full HD resolution
  RESOLUTION_HD_720P = 2; // 720p HD resolution
}

/**
  * Available camera framerates.
  */
enum Framerate {
  FRAMERATE_UNSPECIFIED = 0; // Framerate not specified
  FRAMERATE_FPS_30 = 1; // 30 frames per second
  FRAMERATE_FPS_25 = 2; // 25 frames per second
}

/**
  * Camera parameters.
  */
message CameraParameters {
  int32 h264_bitrate = 1; // Bitrate of the h264 stream
  int32 mjpg_bitrate = 2; // Bitrate of the MJPG stream used for still pictures
  int32 exposure = 3; // Shutter speed in 10000/th second (-1 for automatic exposure)
  int32 white_balance = 4; // White balance temperature in range 2800..9300 (-1 for automatic white balance)
  int32 hue = 5; // Hue in range -40..40 (0 as default)
  Resolution resolution = 6; // Stream, recording and image resolution
  Framerate framerate = 7; // Stream and recording framerate
}

/**
  * Available temperature units.
  */
enum TemperatureUnit {
  TEMPERATURE_UNIT_UNSPECIFIED = 0; // Temperature unit not specfied
  TEMPERATURE_UNIT_CELSIUS = 1; // Temperature should be displayed as Celcius
  TEMPERATURE_UNIT_FAHRENHEIT = 2; // Temperature should be displayed as Fahrenheit
}

/**
  * Available logo types.
  */
enum LogoType {
  LOGO_TYPE_UNSPECIFIED = 0; // Logo type not specified
  LOGO_TYPE_NONE = 1; // Do not add any logo
  LOGO_TYPE_DEFAULT = 2; // Add default logo
  LOGO_TYPE_CUSTOM = 3; // Add user defined logo
}

/**
  * Available depth units.
  */
enum DepthUnit {
  DEPTH_UNIT_UNSPECIFIED = 0; // Depth unit not specified
  DEPTH_UNIT_METERS = 1; // Depth should be displayed as meters
  DEPTH_UNIT_FEET = 2; // Depth should be displayed as feet
}

/**
  * Available font sizes for overlay text elements.
  */
  enum FontSize {
  FONT_SIZE_UNSPECIFIED = 0; // Font size not specified
  FONT_SIZE_PX15 = 1; // 15 px
  FONT_SIZE_PX20 = 2; // 20 px
  FONT_SIZE_PX25 = 3; // 25 px
  FONT_SIZE_PX30 = 4; // 30 px
  FONT_SIZE_PX35 = 5; // 35 px
  FONT_SIZE_PX40 = 6; // 40 px
}

/**
 * Overlay parameters.
 *
 * All available parameters that can be used to configure telemetry overlay on video recordings.
 */
message OverlayParameters {
  bool temperature_enabled = 1; // If temperature should be included
  bool depth_enabled = 2; // If depth should be included
  bool heading_enabled = 3; // If heading should be included
  bool tilt_enabled = 4; // If camera tilt angle should be included
  bool date_enabled = 5; // If date should be included
  LogoType logo_type = 6; // Which logo should be used
  DepthUnit depth_unit = 7; // Which unit should be used for depth: Meter, Feet or None
  TemperatureUnit temperature_unit = 8; // Which unit should be used for temperature: Celcius or Fahrenheit
  int32 timezone_offset = 9; // Timezone offset from UTC
  int32 margin_width = 10; // Horizontal margins of text elements
  int32 margin_height = 11; // Vertical margins of text elements
  FontSize font_size = 12; // Font size of text elements
  string title = 13; // Optional title
  string subtitle = 14; // Optional subtitle
  string date_format = 16; // Posix strftime format string for time stamp
  /**
    * Pixel intensity to subtract from text background (restricted to 0..255),
    * (result background intensity is restricted to max 100)
    */
  int32 shading = 17;
}
