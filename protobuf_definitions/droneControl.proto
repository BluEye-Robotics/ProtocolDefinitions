syntax = "proto3";

package blueye.protocol;


/*
 * Common messages
 *
 * These are used for logging as well as building requests and responses.
 */

// The message for motion input
message MotionInput {
    float surge = 1;
    float sway = 2;
    float heave = 3;
    float yaw = 4;
    float slow = 5;
    float boost = 6;
}

message Lights {
    uint32 percentage = 1;
}

message LatLongPosition {
    float latitude = 1;
    float longitude = 2;
}

message ConnectionDuration {
    int64 connection_duration = 1;
}

message AutoHeadingState {
    bool enabled = 1;
}

message AutoDepthState {
    bool enabled = 1;
}

enum Directions {
    UP = 0;
    DOWN = 1;
}

message SystemTime {
    string unix_timestamp = 1;
}

/*
 * Request/Response messages
 *
 * These messages wrap the common messages. By using empty versions of these messages
 * instead of the Empty message from Google we retain the flexibility of changing the
 * response/request without making a breaking change. The downside is the added
 * verbosity.
 */

// The motion input request
message SetMotionInputRequest {
    MotionInput motion_input = 1;
}
// The motion input response
message SetMotionInputResponse {}


message SetLightsRequest {
    Lights lights = 1;
}
message SetLightsResponse {}


message SetUserPositionRequest {
    LatLongPosition position = 1;
}
message SetUserPositionResponse {}


message PetWatchdogRequest {
    ConnectionDuration connection_duration = 1;
}
message PetWatchdogResponse {}


message StartCompassCalibrationRequest {}
message StartCompassCalibrationResponse {}


message CancelCompassCalibrationRequest {}
message CancelCompassCalibrationResponse {}


message SaveCompassCalibrationRequest {}
message SaveCompassCalibrationResponse {}


message SetAutoHeadingStateRequest {
    AutoHeadingState auto_heading_state = 1;
}
message SetAutoHeadingStateResponse {}


message SetAutoDepthStateRequest {
    AutoDepthState auto_depth_state = 1;
}
message SetAutoDepthStateResponse {}

message AdjustAutoDepthSetpointRequest {
    Directions direction = 1;
}
message AdjustAutoDepthSetpointResponse {}

message AdjustAutoHeadingSetpointRequest {
    Directions direction = 1;
}
message AdjustAutoHeadingSetpointResponse {}

message SetSystemTimeRequest {
    SystemTime system_time = 1;
}
message SetSystemTimeResponse {}

message SetWaterDensityRequest {
    uint32 water_density = 1;
}
message SetWaterDensityResponse {}

service DroneControl {
    // The function for setting the motion input
    rpc SetMotionInput (SetMotionInputRequest) returns (SetMotionInputResponse){
        //
        // Extra comment for the SetMotionInput rpc
    }

    rpc SetLights (SetLightsRequest) returns (SetLightsResponse);
    rpc SetUserPosition (SetUserPositionRequest) returns (SetUserPositionResponse);
    rpc PetWatchdog (PetWatchdogRequest) returns (PetWatchdogResponse);
    rpc StartCompassCalibration (StartCompassCalibrationRequest) returns (StartCompassCalibrationResponse);
    rpc CancelCompassCalibration (CancelCompassCalibrationRequest) returns (CancelCompassCalibrationResponse);
    rpc SaveCompassCalibration (SaveCompassCalibrationRequest) returns (SaveCompassCalibrationResponse);
    rpc SetAutoHeadingState (SetAutoHeadingStateRequest) returns (SetAutoHeadingStateResponse);
    rpc SetAutoDepthState (SetAutoDepthStateRequest) returns (SetAutoDepthStateResponse);
    rpc AdjustAutoDepthSetpoint (AdjustAutoDepthSetpointRequest) returns (AdjustAutoDepthSetpointResponse);
    rpc AdjustAutoHeadingSetpoint (AdjustAutoHeadingSetpointRequest) returns (AdjustAutoHeadingSetpointResponse);
    rpc SetSystemTime (SetSystemTimeRequest) returns (SetSystemTimeResponse);
    rpc SetWaterDensity (SetWaterDensityRequest) returns (SetWaterDensityResponse);
}
