// Telemetry
//
// These messages define telemetry messages from the Blueye drone.
syntax = "proto3";

package blueye.protocol;
import "aquatroll.proto";
import "message_formats.proto";
import "mission_planning.proto";
option csharp_namespace = "Blueye.Protocol.Protobuf";

// Receive the current attitude of the drone.
message AttitudeTel {
  Attitude attitude = 1; // The attitude of the drone.
}

// Receive the current altitude of the drone.
message AltitudeTel {
  Altitude altitude = 1; // The altitude of the drone.
}

// Distance to an object in front of the drone when a 1D pinger is mounted forwards.
message ForwardDistanceTel {
  ForwardDistance forward_distance = 1;
}

// Position estimate of the drone if a DVL or a positioning system is available.
message PositionEstimateTel {
  PositionEstimate position_estimate = 1;
}

// Measurement of the drones position relative to the sea surface.
message DepthTel {
  Depth depth = 1;
}

// Reference signals indicating desired states.
message ReferenceTel {
  Reference reference = 1;
}

// Reference for the auto pilot when a mission is active.
message ReferenceAutoPilotTel {
  ReferenceAutoPilot reference_auto_pilot = 1;
}

// Mission status from the mission supervisor.
message MissionStatusTel {
  MissionStatus mission_status = 1;
}

// Notification from the control system.
message NotificationTel {
  Notification notification = 1;
}

// Control force in all directions.
message ControlForceTel {
  ControlForce control_force = 1;
}

// Controller health indicating the load of the controller, used to set a color in the heading and depth bar.
message ControllerHealthTel {
  ControllerHealth controller_health = 1;
}

// Receive the status of the main lights of the drone.
message LightsTel {
  Lights lights = 1;
}

// Receive the status of any guest port lights connected to the drone.
message GuestPortLightsTel {
  Lights lights = 1;
}

// Receive the status of any lasers connected to the drone.
message LaserTel {
  Laser laser = 1;
}

// Pilot position (originating from device GPS) for logging.
message PilotGPSPositionTel {
  LatLongPosition position = 1;
}

// Record state from the drone.
message RecordStateTel {
  RecordState record_state = 1;
}

// Time-lapse state from the drone.
message TimeLapseStateTel {
  TimeLapseState time_lapse_state = 1;
}

// Receive essential information about the battery status.
message BatteryTel {
  Battery battery = 1; // Essential battery information.
}

// Receive detailed information about a battery using the
// BQ40Z50 battery management system.
message BatteryBQ40Z50Tel {
  BatteryBQ40Z50 battery = 1; // Detailed battery information.
}

// Receive the dive time of the drone.
message DiveTimeTel {
  DiveTime dive_time = 1; // The current dive time of the drone.
}

// Receive time information from the drone.
message DroneTimeTel {
  SystemTime real_time_clock = 1; // The real-time clock of the drone.
  SystemTime monotonic_clock = 2; // The monotonic clock of the drone (time since power on).
}

// Water temerature from the depth sensor.
message WaterTemperatureTel {
  WaterTemperature temperature = 1;
}

// Drone CPU temperature
message CPUTemperatureTel {
  CPUTemperature temperature = 1;
}

// Receive temperature information from the top canister.
message CanisterTopTemperatureTel {
  CanisterTemperature temperature = 1; // Temperature information.
}

// Receive temperature information from the bottom canister.
message CanisterBottomTemperatureTel {
  CanisterTemperature temperature = 1; // Temperature information.
}

// Receive humidity information from the top canister.
message CanisterTopHumidityTel {
  CanisterHumidity humidity = 1; // Humidity information
}

// Receive humidity information from the bottom canister.
message CanisterBottomHumidityTel {
  CanisterHumidity humidity = 1; // Humidity information
}

// Video storage info.
message VideoStorageSpaceTel {
  StorageSpace storage_space = 1;
}

// Data storage info.
message DataStorageSpaceTel {
  StorageSpace storage_space = 1;
}

// Calibration state used for calibration rotine.
message CalibrationStateTel {
  CalibrationState calibration_state = 1;
}

// Tilt stabilization state.
message TiltStabilizationTel {
  TiltStabilizationState state = 1;
}

// Iperf indicates the available bandwidth on the tether from drone to surface unit.
message IperfTel {
  IperfStatus status = 1;
}

// Number of connected clients streaming video.
message NStreamersTel {
  NStreamers n_streamers = 1;
}

// Tilt angle state on main camera.
message TiltAngleTel {
  TiltAngle angle = 1;
}

// Receive metadata and information about the connected drone.
message DroneInfoTel {
  DroneInfo drone_info = 1; // Various metadata such as software versions and serial number.
}

// Receive currently set error flags.
message ErrorFlagsTel {
  ErrorFlags error_flags = 1; // Currently set error flags on the drone.
}

// Receive the current state of the control system.
message ControlModeTel {
  ControlMode state = 1;  // State of the control system.
}

// Thickness gauge measurement telemetry message.
message ThicknessGaugeTel {
  ThicknessGauge thickness_gauge = 1;  // Tickness measurement with a cygnus gauge.
}

// Cathodic Protection Potential probe telemetry message
message CpProbeTel {
  CpProbe cp_probe = 1; // Reading from cp probe.
}

// Metadata from the In-Situ Aqua Troll probe's common registers
message AquaTrollProbeMetadataTel {
  AquaTrollProbeMetadata probe = 1; // AquaTroll message containing sensor array.
}

// Metadata from a single sensor from In-Situ Aqua Troll probe
message AquaTrollSensorMetadataTel {
  AquaTrollSensorMetadataArray sensors = 1; // AquaTroll message containing sensor array.
}

// Single sensor from In-Situ Aqua Troll probe
message AquaTrollSensorParametersTel {
  AquaTrollSensorParametersArray sensors = 1; // AquaTroll message containing parameter array.
}

// List of connected clients telemetry message.
message ConnectedClientsTel {
  uint32 client_id_in_control = 1; // The client id of the client in control.
  repeated ConnectedClient connected_clients = 2; // List of connected clients.
}

// State of a generic servo
message GenericServoTel {
  GenericServo servo = 1; // Servo state
}

// State of the servo installed in the multibeam
message MultibeamServoTel {
  MultibeamServo servo = 1; // Multibeam servo state
}

// GuestPort current readings
message GuestPortCurrentTel {
  GuestPortCurrent current = 1;
}

// Calibrated IMU data
message CalibratedImuTel {
  Imu imu = 1;
}

// Raw IMU data from IMU 1
message Imu1Tel {
  Imu imu = 1;
}

// Raw IMU data from IMU 2
message Imu2Tel {
  Imu imu = 1;
}

// Medusa gamma ray sensor spectrometer data
message MedusaSpectrometerDataTel {
  MedusaSpectrometerData data = 1;
}

// Oculus sonar ping data
message OculusPingTel {
  OculusPing ping = 1; // Ping data from an Oculus sonar
}

// Oculus sonar ping data
message OculusConfigTel {
  OculusConfig config = 1; // Config data from an Oculus sonar
}

message OculusDiscoveryTel {
  OculusDiscovery discovery = 1; // Discovery data from an Oculus sonar
}
