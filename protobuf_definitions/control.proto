// Control
//
// These messages define control messages accepted by the Blueye drone.
syntax = "proto3";

package blueye.protocol;
import "aquatroll.proto";
import "message_formats.proto";
option csharp_namespace = "Blueye.Protocol.Protobuf";

// Issue a command to move the drone in the surge, sway, heave, or yaw direction.
message MotionInputCtrl {
  MotionInput motion_input = 1; // Message with the desired movement in each direction.
}

// Issue a command to tilt the drone camera.
message TiltVelocityCtrl {
  TiltVelocity velocity = 1; // Message with the desired tilt velocity (direction and speed).
}

// Issue a command to set the main light intensity.
message LightsCtrl {
  Lights lights = 1; // Message with the desired light intensity.
}

// Issue a command to set the guest port light intensity.
message GuestportLightsCtrl {
  Lights lights = 1; // Message with the desired light intensity.
}

// Issue a command to set the laser intensity.
message LaserCtrl {
  Laser laser = 1; // Message with the desired laser intensity.
}

// Issue a command with the GPS position of the pilot.
message PilotGPSPositionCtrl {
  LatLongPosition position = 1; // The GPS position of the pilot.
}

// Issue a watchdog message to indicate that the remote client is connected and working as expected.
//
// If a watchdog message is not received every second, the drone will turn off lights and other auto
// functions to indicate that connection with the client has been lost.
message WatchdogCtrl {
  ConnectionDuration connection_duration = 1; // Message with the number of seconds the client has been connected.
  uint32 client_id = 2; // The ID of the client, received in the ConnectClientRep response.
}

// Issue a command to start video recording.
message RecordCtrl {
  RecordOn record_on = 1; // Message specifying which cameras to record.
}

// Issue a command to take a picture.
message TakePictureCtrl {
}

// Issue a command to start compass calibration.
message StartCalibrationCtrl {
}

// Issue a command to cancel compass calibration.
message CancelCalibrationCtrl {
}

// Issue a command to finish compass calibration.
message FinishCalibrationCtrl {
}

// Issue a command to set auto heading to a desired state.
message AutoHeadingCtrl {
  AutoHeadingState state = 1; // State of the heading controller
}

// Issue a command to set auto depth to a desired state.
message AutoDepthCtrl {
  AutoDepthState state = 1; // State of the depth controller
}

// Issue a command to set auto altitude to a desired state.
message AutoAltitudeCtrl {
  AutoAltitudeState state = 1; // State of the altitude controller
}

// Issue a command to set station keeping to a desired state.
message StationKeepingCtrl {
  StationKeepingState state = 1; // State of the station keeping controller
}

// Issue a command to set station keeping with weather vaning to a desired state.
message WeatherVaningCtrl {
  WeatherVaningState state = 1; // State of the weather vaning controller
}

// Issue a command to set Auto Pilot for cruising and turning to a desired state.
message AutoPilotSurgeYawCtrl {
  AutoPilotSurgeYawState state = 1; // State of the auto pilot surge yaw controller
}

// Issue a command to set Auto Pilot for vertiacl movement to a desired state.
message AutoPilotHeaveCtrl {
  AutoPilotHeaveState state = 1; // State of the auto pilot heave controller
}

// Issue a command to start and pause the loaded mission.
message RunMissionCtrl {
}

// Issue a command to pause the loaded mission.
message PauseMissionCtrl {
}

// Clear the loaded mission.
message ClearMissionCtrl {
}

// Issue a command to reset the position estimate.
message ResetPositionCtrl {
  ResetPositionSettings settings = 1; // Reset settings.
}

// Issue a command to reset the odometer.
message ResetOdometerCtrl {
}

// Issue a command to calibrate the DVL gyro.
message CalibrateDvlGyroCtrl {
}

// Issue a command to enable or disable tilt stabilization.
message TiltStabilizationCtrl {
  TiltStabilizationState state = 1; // Message with the tilt stabilization state to set.
}

// Issue a command to set the water density.
message WaterDensityCtrl {
  WaterDensity density = 1; // Message with the water density to set.
}

// Issue a command to set the pinger configuration.
message PingerConfigurationCtrl {
  PingerConfiguration configuration = 1; // Message with the pinger configuration to set.
}

// Issue a command to set the system time on the drone.
message SystemTimeCtrl {
  SystemTime system_time = 1; // Message with the system time to set.
}

// Issue a command to control the gripper.
message GripperCtrl {
  GripperVelocities gripper_velocities = 1; // The desired gripping and rotation velocity.
}

// Issue a command to set a generic servo value.
message GenericServoCtrl {
  GenericServo servo = 1; // Message with the desired servo value.
}

// Issue a command to set multibeam servo angle.
message MultibeamServoCtrl {
  MultibeamServo servo = 1; // Message with the desired servo angle.
}

// Deactivate the guest port power
message DeactivateGuestPortsCtrl {
}

// Activated the guest port power
message ActivateGuestPortsCtrl {
}

// Restart the guest ports by turning power on and off
message RestartGuestPortsCtrl {
  GuestPortRestartInfo restart_info = 1; // Message with information about how long to keep the guest ports off.
}

// Request to set an In-Situ Aqua Troll parameter unit
message SetAquaTrollParameterUnitCtrl {
  // Message with information about which parameter to set and the unit to set it to.
  SetAquaTrollParameterUnit parameter_info = 1;
}

// Request to change the In-Situ Aqua Troll connection status
message SetAquaTrollConnectionStatusCtrl {
  // Message with information about which parameter to set and the unit to set it to.
  SetAquaTrollConnectionStatus connection_status = 1;
}

// Update multibeam settings
message SetOculusConfigCtrl {
  OculusConfig config = 1; // Message with the Oculus ping configuration to set.
}

// Activate multibeam
message ActivateMultibeamCtrl {
  OculusConfig config = 1; // Message with the Oculus ping configuration to set on connect
}

// Deactivate multibeam
message DeactivateMultibeamCtrl {
}
